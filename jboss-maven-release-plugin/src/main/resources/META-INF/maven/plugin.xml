<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2013-02-21 -->

<!-- a straight copy with only a hint on the release manager requirement -->

<plugin>
    <!-- TODO: use a generated file -->
    <name>JBoss Maven Release Plugin</name>
    <description>This plugin is used to release a project with Maven, saving a lot of repetitive, manual work.</description>
    <groupId>org.jboss.maven.plugins</groupId>
    <artifactId>jboss-maven-release-plugin</artifactId>
    <version>0.1.0-SNAPSHOT</version>

    <goalPrefix>release</goalPrefix>
    <isolatedRealm>false</isolatedRealm>
    <inheritedByDefault>true</inheritedByDefault>
    <mojos>
        <mojo>
            <goal>prepare</goal>
            <description>Prepare for a release in SCM. Steps through several phases to ensure the POM is ready to be released and then
                prepares SCM to eventually contain a tagged version of the release and a record in the local copy of the parameters
                used. This can be followed by a call to &lt;tt&gt;release:perform&lt;/tt&gt;. For more info see &lt;a
                href=&quot;http://maven.apache.org/plugins/maven-release-plugin/examples/prepare-release.html&quot;
                &gt;http://maven.apache.org/plugins/maven-release-plugin/examples/prepare-release.html&lt;/a&gt;.</description>
            <requiresDirectInvocation>false</requiresDirectInvocation>
            <requiresProject>true</requiresProject>
            <requiresReports>false</requiresReports>
            <aggregator>true</aggregator>
            <requiresOnline>false</requiresOnline>
            <inheritedByDefault>true</inheritedByDefault>
            <implementation>org.apache.maven.plugins.release.PrepareReleaseMojo</implementation>
            <language>java</language>
            <instantiationStrategy>per-lookup</instantiationStrategy>
            <executionStrategy>once-per-session</executionStrategy>
            <since>2.4</since>
            <threadSafe>false</threadSafe>
            <parameters>
                <parameter>
                    <name>addSchema</name>
                    <type>boolean</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to add a schema to the POM if it was previously missing on release.</description>
                </parameter>
                <parameter>
                    <name>allowReleasePluginSnapshot</name>
                    <type>boolean</type>
                    <since>2.0-beta-9</since>
                    <required>false</required>
                    <editable>false</editable>
                    <description>Whether to allow usage of a SNAPSHOT version of the Release Plugin. This in an internal property used to support
                        testing of the plugin itself in batch mode.</description>
                </parameter>
                <parameter>
                    <name>allowTimestampedSnapshots</name>
                    <type>boolean</type>
                    <since>2.0-beta-7</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to allow timestamped SNAPSHOT dependencies. Default is to fail when finding any SNAPSHOT.</description>
                </parameter>
                <parameter>
                    <name>arguments</name>
                    <alias>prepareVerifyArgs</alias>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Additional arguments to pass to the Maven executions, separated by spaces.</description>
                </parameter>
                <parameter>
                    <name>autoVersionSubmodules</name>
                    <type>boolean</type>
                    <since>2.0-beta-5</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to automatically assign submodules the parent version. If set to false, the user will be prompted for the
                        version of each submodules.</description>
                </parameter>
                <parameter>
                    <name>basedir</name>
                    <type>java.io.File</type>
                    <required>true</required>
                    <editable>false</editable>
                    <description></description>
                </parameter>
                <parameter>
                    <name>checkModificationExcludeList</name>
                    <type>java.lang.String</type>
                    <since>2.1</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Command-line version of checkModificationExcludes.</description>
                </parameter>
                <parameter>
                    <name>checkModificationExcludes</name>
                    <type>java.lang.String[]</type>
                    <since>2.1</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>A list of additional exclude filters that will be skipped when checking for modifications on the working copy. Is
                        ignored, when checkModificationExcludes is set.</description>
                </parameter>
                <parameter>
                    <name>commitByProject</name>
                    <type>boolean</type>
                    <since>2.0-beta-5</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Commits to do are atomic or by project.</description>
                </parameter>
                <parameter>
                    <name>completionGoals</name>
                    <type>java.lang.String</type>
                    <since>2.2</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Goals to run on completion of the preparation step, after transformation back to the next development version but
                        before committing. Space delimited.</description>
                </parameter>
                <parameter>
                    <name>developmentVersion</name>
                    <type>java.lang.String</type>
                    <since>2.0-beta-8</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Default version to use for new local working copy.</description>
                </parameter>
                <parameter>
                    <name>dryRun</name>
                    <type>boolean</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Dry run: don&apos;t checkin or tag anything in the scm repository, or modify the checkout. Running
                        &lt;code&gt;mvn -DdryRun=true release:prepare&lt;/code&gt; is useful in order to check that modifications to poms and scm
                        operations (only listed on the console) are working as expected. Modified POMs are written alongside the
                        originals without modifying them.</description>
                </parameter>
                <parameter>
                    <name>generateReleasePoms</name>
                    <type>boolean</type>
                    <deprecated>Please use release:prepare-with-pom instead.</deprecated>
                    <required>false</required>
                    <editable>true</editable>
                    <description></description>
                </parameter>
                <parameter>
                    <name>javaHome</name>
                    <type>java.io.File</type>
                    <since>2.0-beta-8</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The {@code JAVA_HOME} parameter to use for forked Maven invocations.</description>
                </parameter>
                <parameter>
                    <name>localCheckout</name>
                    <type>boolean</type>
                    <since>2.0</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Use a local checkout instead of doing a checkout from the upstream repository.
                        ATTENTION: This will only work with distributed SCMs which support the file:// protocol
                        like e.g. git, jgit or hg!

                        TODO: we should think about having the defaults for the various SCM providers provided via modello!</description>
                </parameter>
                <parameter>
                    <name>localRepoDirectory</name>
                    <type>java.io.File</type>
                    <since>2.0-beta-8</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The command-line local repository directory in use for this build (if specified).</description>
                </parameter>
                <parameter>
                    <name>mavenExecutorId</name>
                    <type>java.lang.String</type>
                    <since>2.0-beta-8</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Role hint of the {@link org.apache.maven.shared.release.exec.MavenExecutor} implementation to use.</description>
                </parameter>
                <parameter>
                    <name>mavenHome</name>
                    <type>java.io.File</type>
                    <since>2.0-beta-8</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The {@code M2_HOME} parameter to use for forked Maven invocations.</description>
                </parameter>
                <parameter>
                    <name>password</name>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The SCM password to use.</description>
                </parameter>
                <parameter>
                    <name>pomFileName</name>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The file name of the POM to execute any goals against.</description>
                </parameter>
                <parameter>
                    <name>preparationGoals</name>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Goals to run as part of the preparation step, after transformation but before committing. Space delimited.</description>
                </parameter>
                <parameter>
                    <name>providerImplementations</name>
                    <type>java.util.Map</type>
                    <since>2.0-beta-6</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Add a new or overwrite the default implementation per provider.
                        The key is the scm prefix and the value is the role hint of the {@link org.apache.maven.scm.provider.ScmProvider}.</description>
                </parameter>
                <parameter>
                    <name>pushChanges</name>
                    <type>boolean</type>
                    <since>2.1</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Implemented with git will or not push changes to the upstream repository.
                        &lt;code&gt;true&lt;/code&gt; by default to preserve backward compatibility.</description>
                </parameter>
                <parameter>
                    <name>reactorProjects</name>
                    <type>java.util.List</type>
                    <required>true</required>
                    <editable>false</editable>
                    <description></description>
                </parameter>
                <parameter>
                    <name>releaseVersion</name>
                    <type>java.lang.String</type>
                    <since>2.0-beta-8</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Default version to use when preparing a release or a branch.</description>
                </parameter>
                <parameter>
                    <name>remoteTagging</name>
                    <type>boolean</type>
                    <since>2.0-beta-9</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Currently only implemented with svn scm.
                        &lt;ul&gt;
                        &lt;li&gt;Enables a workaround to prevent issue due to svn client &gt; 1.5.0 (fixed in 1.6.5)
                        (http://jira.codehaus.org/browse/SCM-406)&lt;/li&gt;
                        &lt;li&gt;You may not want to use this in conjunction with &lt;code&gt;suppressCommitBeforeTag&lt;/code&gt;, such that no poms with
                        released versions are committed to the working copy ever.&lt;/li&gt;
                        &lt;/ul&gt;</description>
                </parameter>
                <parameter>
                    <name>resume</name>
                    <type>boolean</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Resume a previous release attempt from the point where it was stopped.</description>
                </parameter>
                <parameter>
                    <name>scmCommentPrefix</name>
                    <type>java.lang.String</type>
                    <since>2.0-beta-5</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The message prefix to use for all SCM changes.</description>
                </parameter>
                <parameter>
                    <name>suppressCommitBeforeTag</name>
                    <type>boolean</type>
                    <since>2.1</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to suppress a commit of changes to the working copy before the tag is created. &lt;br/&gt;
                        &lt;br/&gt;
                        This requires &lt;code&gt;remoteTagging&lt;/code&gt; to be set to false. &lt;br/&gt;
                        &lt;br/&gt;
                        &lt;code&gt;suppressCommitBeforeTag&lt;/code&gt; is useful when you want to avoid poms with released versions in all
                        revisions of your trunk or development branch.</description>
                </parameter>
                <parameter>
                    <name>tag</name>
                    <alias>releaseLabel</alias>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The SCM tag to use.</description>
                </parameter>
                <parameter>
                    <name>tagBase</name>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The tag base directory in SVN, you must define it if you don&apos;t use the standard svn layout (trunk/tags/branches).
                        For example, &lt;code&gt;http://svn.apache.org/repos/asf/maven/plugins/tags&lt;/code&gt;. The URL is an SVN URL and does not
                        include the SCM provider and protocol.</description>
                </parameter>
                <parameter>
                    <name>tagNameFormat</name>
                    <type>java.lang.String</type>
                    <since>2.2.0</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Format to use when generating the tag name if none is specified. Property interpolation is performed on the
                        tag, but in order to ensure that the interpolation occurs during release, you must use &lt;code&gt;@{...}&lt;/code&gt;
                        to reference the properties rather than &lt;code&gt;${...}&lt;/code&gt;. The following properties are available:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;code&gt;groupId&lt;/code&gt; or &lt;code&gt;project.groupId&lt;/code&gt; - The groupId of the root project.
                        &lt;li&gt;&lt;code&gt;artifactId&lt;/code&gt; or &lt;code&gt;project.artifactId&lt;/code&gt; - The artifactId of the root project.
                        &lt;li&gt;&lt;code&gt;version&lt;/code&gt; or &lt;code&gt;project.version&lt;/code&gt; - The release version of the root project.
                        &lt;/ul&gt;</description>
                </parameter>
                <parameter>
                    <name>updateDependencies</name>
                    <type>boolean</type>
                    <since>2.0-beta-5</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to update dependencies version to the next development version.</description>
                </parameter>
                <parameter>
                    <name>updateWorkingCopyVersions</name>
                    <type>boolean</type>
                    <since>2.1</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to bump the working copy versions to &lt;code&gt;developmentVersion&lt;/code&gt;.</description>
                </parameter>
                <parameter>
                    <name>useEditMode</name>
                    <type>boolean</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Whether to use &quot;edit&quot; mode on the SCM, to lock the file for editing during SCM operations.</description>
                </parameter>
                <parameter>
                    <name>username</name>
                    <type>java.lang.String</type>
                    <required>false</required>
                    <editable>true</editable>
                    <description>The SCM username to use.</description>
                </parameter>
                <parameter>
                    <name>waitBeforeTagging</name>
                    <type>int</type>
                    <since>2.2</since>
                    <required>false</required>
                    <editable>true</editable>
                    <description>Wait the specified number of second before creating the tag. &lt;br/&gt;
                        &lt;code&gt;waitBeforeTagging&lt;/code&gt; is useful when your source repository is synced between several instances and
                        access to it is determined by geographical location, like the SVN repository at the Apache Software Foundation.</description>
                </parameter>
                <parameter>
                    <name>project</name>
                    <type>org.apache.maven.project.MavenProject</type>
                    <required>true</required>
                    <editable>false</editable>
                    <description></description>
                </parameter>
                <parameter>
                    <name>session</name>
                    <type>org.apache.maven.execution.MavenSession</type>
                    <since>2.0</since>
                    <required>true</required>
                    <editable>false</editable>
                    <description></description>
                </parameter>
                <parameter>
                    <name>settings</name>
                    <type>org.apache.maven.settings.Settings</type>
                    <required>true</required>
                    <editable>false</editable>
                    <description></description>
                </parameter>
            </parameters>
            <configuration>
                <addSchema implementation="boolean" default-value="true">${addSchema}</addSchema>
                <allowReleasePluginSnapshot implementation="boolean" default-value="false">${allowReleasePluginSnapshot}</allowReleasePluginSnapshot>
                <allowTimestampedSnapshots implementation="boolean" default-value="false">${ignoreSnapshots}</allowTimestampedSnapshots>
                <arguments implementation="java.lang.String">${arguments}</arguments>
                <autoVersionSubmodules implementation="boolean" default-value="false">${autoVersionSubmodules}</autoVersionSubmodules>
                <basedir implementation="java.io.File" default-value="${basedir}"/>
                <checkModificationExcludeList implementation="java.lang.String">${checkModificationExcludeList}</checkModificationExcludeList>
                <commitByProject implementation="boolean" default-value="false">${commitByProject}</commitByProject>
                <completionGoals implementation="java.lang.String" default-value="">${completionGoals}</completionGoals>
                <developmentVersion implementation="java.lang.String">${developmentVersion}</developmentVersion>
                <dryRun implementation="boolean" default-value="false">${dryRun}</dryRun>
                <generateReleasePoms implementation="boolean" default-value="false">${generateReleasePoms}</generateReleasePoms>
                <javaHome implementation="java.io.File" default-value="${java.home}"/>
                <localCheckout implementation="boolean" default-value="false">${localCheckout}</localCheckout>
                <localRepoDirectory implementation="java.io.File" default-value="${maven.repo.local}"/>
                <mavenExecutorId implementation="java.lang.String" default-value="invoker">${mavenExecutorId}</mavenExecutorId>
                <mavenHome implementation="java.io.File" default-value="${maven.home}"/>
                <password implementation="java.lang.String">${password}</password>
                <pomFileName implementation="java.lang.String">${pomFileName}</pomFileName>
                <preparationGoals implementation="java.lang.String" default-value="clean verify">${preparationGoals}</preparationGoals>
                <pushChanges implementation="boolean" default-value="true">${pushChanges}</pushChanges>
                <reactorProjects implementation="java.util.List" default-value="${reactorProjects}"/>
                <releaseVersion implementation="java.lang.String">${releaseVersion}</releaseVersion>
                <remoteTagging implementation="boolean" default-value="true">${remoteTagging}</remoteTagging>
                <resume implementation="boolean" default-value="true">${resume}</resume>
                <scmCommentPrefix implementation="java.lang.String" default-value="[maven-release-plugin] ">${scmCommentPrefix}</scmCommentPrefix>
                <suppressCommitBeforeTag implementation="boolean" default-value="false">${suppressCommitBeforeTag}</suppressCommitBeforeTag>
                <tag implementation="java.lang.String">${tag}</tag>
                <tagBase implementation="java.lang.String">${tagBase}</tagBase>
                <tagNameFormat implementation="java.lang.String" default-value="@{project.artifactId}-@{project.version}">${tagNameFormat}</tagNameFormat>
                <updateDependencies implementation="boolean" default-value="true">${updateDependencies}</updateDependencies>
                <updateWorkingCopyVersions implementation="boolean" default-value="true">${updateWorkingCopyVersions}</updateWorkingCopyVersions>
                <useEditMode implementation="boolean" default-value="false">${useEditMode}</useEditMode>
                <username implementation="java.lang.String">${username}</username>
                <waitBeforeTagging implementation="int" default-value="0">${waitBeforeTagging}</waitBeforeTagging>
                <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
                <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
                <settings implementation="org.apache.maven.settings.Settings" default-value="${settings}"/>
            </configuration>
            <requirements>
                <requirement>
                    <role>org.apache.maven.shared.release.ReleaseManager</role>
                    <!-- we want the jboss release manager -->
                    <role-hint>jboss</role-hint>
                    <field-name>releaseManager</field-name>
                </requirement>
                <requirement>
                    <role>org.apache.maven.scm.manager.ScmManager</role>
                    <field-name>scmManager</field-name>
                </requirement>
            </requirements>
        </mojo>
    </mojos>
</plugin>